 password= ''.join(random.choice(characters) for _ in range(length))
    # storing=mke one string-pick 1 rndm char(loop through len times)

    2->  What is CLI?
CLI stands for Command-Line Interface. It means your program will run in the terminal using text input/output (like your Password.py script).

No buttons or windows.

You type commands and see output as text.


.....................................................................................


MODELS-->
without mpdel-user = {"username": "mahi", "password": "123", "is_admin": False}. No rules, no methods, no clear structure.
with model-user = User("mahi", "123", False)
Defines what kind of data your app will use (users, questions, quizzes).
Makes sure every quiz has valid structure (e.g., a title and list of questions).
Has .to_dict() and .from_dict() methods so objects can be saved (e.g. to JSON).


to_dict()	Converts object â†’ dictionary (for saving)
   q = Question("What is 2+2?", ["2", "3", "4"], "4")->Converts it into a plain dictionary like this:
{
    "id": "c37b...uuid...",
    "prompt": "What is 2+2?",
    "options": ["2", "3", "4"],
    "answer": "4",
    "q_type": "mcq"
You canâ€™t directly save class objects like Question into JSON or text files.
json.dump() works only with dictionaries and lists, not objects.
to_dict() makes the object storable and transferrable.
}

from_dict()	Converts dictionary â†’ object (for loading)...
Takes a dictionary like:
{
    "prompt": "What is 2+2?",
    "options": ["2", "3", "4"],
    "answer": "4",
    "q_type": "mcq"
}Returns a new Question object->q = Question("What is 2+2?", ["2", "3", "4"], "4", "mcq")

models Feature	
âœ… Structure	Defines what kind of data your app will use (users, questions, quizzes).


FILE STRUCTURE...

with open(USER_FILE, 'r') as f:
    return [user.from_dict(u) for u in json.load(f)] ->
->open the user.json in read mode 
   a temporary name (f) that we can use to refer to the file while it's open.
->json.load(f)->
   This reads the entire content of file f and converts it from JSON to Python.
->for u in json.load(f)->
   This is a list comprehension.
   u represents each user dictionary inside the loaded list
->user.from_dict(u)->
  calls the from_dict() method from your User class to create:
  User("john", "123", False)
->Wraps the loop in square brackets to build a list of User objects.
ðŸ“Œ Final Meaning (Plain English):
"Open the file 'users.json' in read mode as f.
 Read all its content as JSON, convert each user dictionary into a User object using from_dict(), and
  return the list of all those User objects."









............................................................................................................
1->importing the models
2-> creating the models
    creating user class,inititating the constructor then convert the user object to dictionary then
     using the static returns data from json
    Creating the question and quiz and converting the object into dictionary file to_dict and from_dict
     âœ… to_dict(self) â€” Converts an object into a dictionary
     âœ… from_dict(data) â€” Converts a dictionary back into an object


3-> creating the FILE OP method  [data is actually saved to and loaded from the disk using JSON files]
    models.py classes (User, Quiz) provide:
     .to_dict()â†’convert objects to dictionaries(stored JSON)..from_dict() â†’convert dictionaries back into objects (usable in Python).
    This file operation code uses those methods to:
     Save Python objects (User, Quiz) into files.Load them back from files as Python objects.
